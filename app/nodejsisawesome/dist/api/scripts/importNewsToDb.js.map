{"version":3,"sources":["../../../src/api/scripts/importNewsToDb.js"],"names":["loadRepositories","Promise","resolve","reject","repositories","createReadStream","join","__dirname","pipe","headers","on","repository","open_source","currency","addNumberOfCommitsToRepositories","jobs","Object","keys","map","repoKey","resolveJob","numberOfCommits","ownerName","owner_name","toLowerCase","repoName","repo_name","dataBunch","toString","split","forEach","data","match","isFirstCommit","firstCommitTimestamp","Date","replace","trim","e","console","warn","all","then","addMetricsFromRepositoryDetailsPage","require","watchers_count","stargazers_count","forks_count","open_issues","subscribers_count","contributers_count","contributors","length","realValues","error","addNewsCorrelations","repositoryName","news_correlation","scoreRepository","getTime","weightTheRepositories","score","chain"],"mappings":"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","file":"importNewsToDb.js","sourcesContent":["import fs from 'fs';\r\nimport csv from 'fast-csv';\r\nimport path from 'path';\r\n\r\nconst loadRepositories = () => new Promise((resolve, reject) => {\r\n  const repositories = {};\r\n  fs.createReadStream(path.join(__dirname, \"../../../../data/coins_with_repo.csv\"))\r\n    .pipe(csv({\r\n      headers: true\r\n    }))\r\n    .on(\"data\", function (repository) {\r\n      if (repository.open_source === 'True') {\r\n        repositories[repository.currency] = repository;\r\n      }\r\n    })\r\n    .on(\"end\", function () {\r\n      resolve(repositories);\r\n    });\r\n});\r\n\r\nconst addNumberOfCommitsToRepositories = (repositories) => {\r\n  const jobs = Object.keys(repositories).map(function (repoKey) {\r\n    return new Promise(function (resolveJob) {\r\n      repositories[repoKey].numberOfCommits = 0;\r\n      const ownerName = repositories[repoKey].owner_name.toLowerCase();\r\n      const repoName = repositories[repoKey].repo_name.toLowerCase();\r\n\r\n      try {\r\n        fs.createReadStream(path.join(__dirname, '../../../../data/', ownerName + '-' + repoName + '-commits.logs'))\r\n          .on(\"data\", function (dataBunch) {\r\n            dataBunch.toString().split('\\n').forEach(data => {\r\n              if (data.match(/^(commit )/)) {\r\n                repositories[repoKey].numberOfCommits += 1;\r\n              }\r\n\r\n              const isFirstCommit = repositories[repoKey].numberOfCommits === 1;\r\n\r\n              if (isFirstCommit && data.match(/(Date:)/)) {\r\n                repositories[repoKey].firstCommitTimestamp = new Date(data.replace('Date:', '').trim());\r\n              }\r\n            });\r\n          })\r\n          .on(\"end\", function () {\r\n            resolveJob();\r\n          })\r\n          .on('error', function (e) {\r\n            console.warn('Commit file of ' + path.join(__dirname, '../../../data/', ownerName + '-' + repoName + '-commits.logs') + ' not found');\r\n            resolveJob();\r\n          });\r\n      } catch (e) {\r\n        console.warn('Commit file of ' + repoName + '-' + ownerName + ' not found');\r\n        resolveJob();\r\n      }\r\n    });\r\n  });\r\n\r\n  return Promise.all(jobs).then(() => Promise.resolve(repositories));\r\n};\r\n\r\nconst addMetricsFromRepositoryDetailsPage = (repositories) => {\r\n  const jobs = Object.keys(repositories).map(repoKey => new Promise(resolveJob => {\r\n    const ownerName = repositories[repoKey].owner_name.toLowerCase();\r\n    const repoName = repositories[repoKey].repo_name.toLowerCase();\r\n    try {\r\n      const repository = require(path.join(__dirname, '../../../../data/' + ownerName + '-' + repoName + '.json'));\r\n\r\n      repositories[repoKey].watchers_count = repository.watchers_count;\r\n      repositories[repoKey].stargazers_count = repository.stargazers_count;\r\n      repositories[repoKey].forks_count = repository.forks_count;\r\n      repositories[repoKey].open_issues = repository.open_issues;\r\n      repositories[repoKey].subscribers_count = repository.subscribers_count;\r\n      repositories[repoKey].contributers_count = repository.contributors ? repository.contributors.length : 0;\r\n      repositories[repoKey].realValues = true;\r\n    } catch (e) {\r\n      console.error('Can`t find repository data of name ' + repoName + '. Default values are set');\r\n      repositories[repoKey].watchers_count = 0;\r\n      repositories[repoKey].stargazers_count = 0;\r\n      repositories[repoKey].forks_count = 0;\r\n      repositories[repoKey].open_issues = 0;\r\n      repositories[repoKey].subscribers_count = 0;\r\n      repositories[repoKey].contributers_count = 0;\r\n      repositories[repoKey].realValues = false;\r\n    }\r\n    resolveJob();\r\n  }));\r\n\r\n  return Promise.all(jobs).then(() => Promise.resolve(repositories));\r\n};\r\n\r\nconst addNewsCorrelations = (repositories) => {\r\n  Object.keys(repositories).forEach(repositoryName => {\r\n    repositories[repositoryName].news_correlation = 1; // TODO\r\n  });\r\n  return Promise.resolve(repositories);\r\n};\r\n\r\nconst scoreRepository = repository => repository.firstCommitTimestamp ?\r\n  10000000000000000 * ((0.3 * repository.watchers_count + 0.7 * repository.stargazers_count) * 1000 + repository.numberOfCommits) / repository.firstCommitTimestamp.getTime() / 1000 / 60 / 60 / 24 : 0;\r\n\r\nconst weightTheRepositories = (repositories) => {\r\n  Object.keys(repositories).forEach(repositoryName => {\r\n    repositories[repositoryName].score = scoreRepository(repositories[repositoryName]);\r\n  });\r\n\r\n  return Promise.resolve(repositories);\r\n};\r\n\r\nconst chain = loadRepositories()\r\n  .then(addNumberOfCommitsToRepositories)\r\n  .then(addMetricsFromRepositoryDetailsPage)\r\n  .then(addNewsCorrelations)\r\n  .then(weightTheRepositories);\r\n\r\nexport default chain;\r\n"]}